name: CI-CD Docker -> ECR -> EC2

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1
  IMAGE_NAME: student-ci-webapp

jobs:
  build-and-push:
    name: Build & Push to ECR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag & push image to ECR
        env:
          ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ env.AWS_REGION }}
        run: |
          REPO=${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${IMAGE_NAME}
          echo "Building $REPO:${{ github.sha }}"
          docker build -t $REPO:${{ github.sha }} .
          docker tag $REPO:${{ github.sha }} $REPO:latest
          docker push $REPO:${{ github.sha }}
          docker push $REPO:latest

  deploy:
    name: Deploy to EC2
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Trigger deploy on EC2 via SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: SSH & run deploy script on EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          port: 22
          script: |
            set -e
            REGION="${{ env.AWS_REGION }}"
            ACCOUNT="${{ secrets.AWS_ACCOUNT_ID }}"
            IMAGE="${ACCOUNT}.dkr.ecr.${REGION}.amazonaws.com/${IMAGE_NAME}:latest"
            # Login to ECR (if instance has an IAM role with ECR permissions, this is optional)
            aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin ${ACCOUNT}.dkr.ecr.${REGION}.amazonaws.com
            docker pull $IMAGE
            docker stop web || true
            docker rm web || true
            docker run -d --name web -p 80:3000 $IMAGE
